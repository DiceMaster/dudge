<%-- the static segment can be included to JSP using the <%@include ...%> directive, e.g:
<%@include file="/WEB-INF/jspf/header.jspf" %>

J2EE1.4 also enables to specify header or footer segments for multiple pages in web.xml file.
Use the <include-prelude> or <include-coda> elements in <jsp-config> section, e.g.:
<jsp-config>
<jsp-property-group>
<url-pattern>*.jsp</url-pattern>
<include-prelude>/WEB-INF/jspf/header.jspf</include-prelude>
</jsp-property-group>
</jsp-config>
--%>

<%@page pageEncoding="UTF-8" contentType="text/html; charset=UTF-8"%>

<%@taglib uri="http://jakarta.apache.org/struts/tags-bean" prefix="bean" %>
<%@taglib uri="http://jakarta.apache.org/struts/tags-html" prefix="html" %>
<%@taglib uri="http://jakarta.apache.org/struts/tags-logic" prefix="logic" %>
<%--
The taglib directive below imports the JSTL library. If you uncomment it,
you must also add the JSTL library to the project. The Add Library... action
on Libraries node in Projects view can be used to add the JSTL 1.1 library.
--%>
<%--
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> 
--%>

<% dudge.web.AuthenticationObject authenticationObject = dudge.web.AuthenticationObject.extract(request); %>
<% dudge.PermissionCheckerRemote pcb = authenticationObject.getPermissionChecker(); %>
<% dudge.DudgeLocal dudgeLocal = dudge.web.ServiceLocator.getInstance().lookupDudge(); %>

<%
int contestId;
try	{ contestId = Integer.parseInt(request.getParameter("contestId")); }
catch (Exception ex) { contestId = dudgeLocal.getDefaultContest().getContestId(); }
%>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<link rel="stylesheet" type="text/css" href="/dudge/ext/resources/css/ext-all.css" />

    <script type="text/javascript" src="/dudge/ext/adapter/ext/ext-base.js"></script>
    <script type="text/javascript" src="/dudge/ext/ext-all-debug.js"></script>

    <title>Dudge</title>

    <style type="text/css">
    html, body {
        font:normal 12px verdana;
        margin:0;
        padding:0;
        border:0 none;
        overflow:hidden;
        height:100%;
    }
    p {
        margin:10px;
    }

	h1 {
		font-size: 200%
	}

	h2 {
		font-size: 150%
	}
    </style>

<script type="text/javascript">
function changePassword() {
	// Add password change dialog.

	// Save/loading status-data for AJAX - response, on action - changePassword.
	var ds = new Ext.data.Store({
		// load using script tags for cross domain, if the data in on the same domain as
		// this page, an HttpProxy would be better
		proxy: new Ext.data.HttpProxy({
			url: 'users.do?reqCode=changePassword'
		}),

		// create reader that reads the Topic records
		reader: new Ext.data.JsonReader(
			{
				root: 'password',
				totalProperty: 'totalCount'
			},
			[
				{name: 'result', mapping: 'result'}
			]
		)
	});

// tabs for the center
var fields = new Ext.form.FieldSet({
	defaults: {inputType: 'password'},
	items:[
		new Ext.form.TextField({
			fieldLabel: '<bean:message key="changePassword.oldPassword" />',
			id: 'oldPassword'
		}),
		new Ext.form.TextField({
			fieldLabel: '<bean:message key="changePassword.newPassword" />',
			id: 'newPassword'
		}),
		new Ext.form.TextField({
			fieldLabel: '<bean:message key="changePassword.repeatNewPassword" />',
			id: 'repeatNewPassword'
		})
	]
});

var changeButton = new Ext.Button({
	text:'<bean:message key="changePassword.change" />'
});

var cancelButton = new Ext.Button({
	text:'<bean:message key="changePassword.cancel" />'
});

var win = new Ext.Window({
	title: '<bean:message key="changePassword.windowTitle" />',
	closable: true,
	width: 300,
	modal: true,
	height: 180,
	//border:false,
	layout: 'fit',
	plain:true,

	items: [fields],
	buttons: [changeButton, cancelButton]
});

win.show(this);

changeButton.on('click' , function() {
	if(fields.findById('newPassword').getValue() ==
		fields.findById('repeatNewPassword').getValue())
	{
		ds.on('load' , function() {
			if(ds.getAt(0).get('result') == "1"){
				Ext.Msg.alert(
					'<bean:message key="changePassword.passwordChanged" />',
					'<bean:message key="changePassword.passwordChanged" />'
				);
				win.close();
			}
			if(ds.getAt(0).get('result') == "0"){
				Ext.Msg.alert(
					'<bean:message key="changePassword.wrongPassword" />',
					'<bean:message key="changePassword.wrongPassword" />'
				);
			}
		});

		ds.load({
			params: {
				reqCode: 'changePassword',
				oldPassword: fields.findById('oldPassword').getValue(),
				newPassword: fields.findById('newPassword').getValue()
			} });

	}
	else { // Passwords don't match
		Ext.Msg.alert(
			'<bean:message key="changePassword.wrongRepeat" />',
			'<bean:message key="changePassword.wrongRepeat" />'
		);
	}
});

cancelButton.on('click', function() {win.close()});
} //changePassword();
</script>
		
<script type="text/javascript">
Ext.onReady(function(){

//Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

// add a combobox for change locales to the toolbar.
var localesArray = [ ['en', '<bean:message key="locale.english" />'],
					 ['ru', '<bean:message key="locale.russian" />'] ];

var languageComboBox = new Ext.form.ComboBox({
	store: new Ext.data.SimpleStore({
        fields: ['key', 'displayName'],
        data : localesArray
    }),
	displayField: 'displayName',
	editable: false,
	typeAhead: true,
	mode: 'local',
	forceSelection: true,
	triggerAction: 'all',
	emptyText: '<bean:message key="locale.currentLocale" />',
	selectOnFocus: true,
	width: 90,
	getListParent: function() {
		return this.el.up('.x-menu');
	},
	iconCls: 'no-icon' //use iconCls if placing within menu to shift to right side of menu
});

languageComboBox.on('select' , function (combo,record,index) {
		var locale_name = record.get('key');
		var localeConnection = new Ext.data.Connection({method: 'POST' , url: 'locale.do'});
		localeConnection.request({
			params: {reqCode: 'setLocale' , locale_name: locale_name},
			callback: function() { window.location.reload( true );}
		});
	});

var mainMenuToolbar = new Ext.Toolbar({
	height: 'auto',
	items: [
		{
			xtype: 'tbtext',
			html: '<a href="users.do?contestId=<%=contestId%>&reqCode=register"><bean:message key="menu.registration"/></a>'
		},
		{
			xtype: 'tbtext',
			html: '<a href="contests.do?contestId=<%=contestId%>&reqCode=list"><bean:message key="menu.contests"/></a>'
		},
		{
			xtype: 'tbtext',
			html: '<a href="authors.jsp?contestId=<%=contestId%>&"><bean:message key="menu.authors"/></a>'
		},
		'->',
		languageComboBox,
		'-',
<% if (!authenticationObject.isAuthenticated()) { %>
		{
			xtype: 'textfield',
			id: 'username',
			emptyText: '<bean:message key="user.login"/>',
			width: 80
		},
		' ',
		{
			xtype: 'textfield',
			id: 'password',
			inputType: 'password',
			width: 80
		},
		' ',
		{
			xtype: 'button',
			name: 'login',
			text: '<bean:message key="login.login"/>',
			type: 'submit',
			handler: function (button, e) {
				var loginConnection = new Ext.data.Connection({method: 'POST' , url: 'login.do?reqCode=login'});
				loginConnection.request({
					params: {username: Ext.getCmp('username').getRawValue() , password: Ext.getCmp('password').getRawValue()},
					callback: function() { window.location.reload( true );}
					});
				}
		}
<% } else { %>
		{
			xtype: 'tbtext',
			html: '<bean:message key="menu.user" />: '
				+ '<b><a href="users.do?reqCode=view&login=<%=authenticationObject.getUsername()%>"><%=authenticationObject.getUsername()%></a></b>'
				+' (<a href="javascript:changePassword()"><bean:message key="menu.changePassword"/></a>)'
		},
		' ',
		{
			xtype: 'button',
			name: 'logout',
			text: '<bean:message key="login.logout"/>',
			type: 'submit',
			handler: function (button, e) {
				var loginConnection = new Ext.data.Connection({method: 'POST' , url: 'login.do?reqCode=logout'});
				loginConnection.request({
					callback: function() { window.location.reload( true );}
					});
				}
		}
<% } %>
		, ' '
	] //items of toolbar
}); // Ext.Toolbar

/*var sentSolutionsGrid = new Ext.grid.GridPanel({
	store: new Ext.data.ArrayStore({
		autoDestroy: true,
		fields: ['solId', 'time', 'problemName'],
		data : [
			['2', '10:23', 'A. Р•Р¶РёРєРё'],
			['1', '10:28', 'C. Р”РµРјРѕРЅС‹ РёР· РІР°СЂРїР°']
		]
	}),
    colModel: new Ext.grid.ColumnModel({
        defaults: {
            width: 60,
            sortable: true
        },
        columns: [
			{id: 'solId', dataIndex: 'solId', hidden: true},
            {id: 'time', header: 'Р’СЂРµРјСЏ', dataIndex: 'time', width: 45, resizable: false},
            {header: 'Р—Р°РґР°С‡Р°', dataIndex: 'problemName', width: 150}
        ],
    }),
    viewConfig: {
        //forceFit: true
    },
    sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
	border: false
});*/

var viewport = new Ext.Viewport({
	layout: 'border',
	items: [
	{
		region: 'north',
		title: '<a href="index.jsp?contestId=<%=contestId%>">Dudge</a>: <a href="contests.do?reqCode=view&contestId=<%=contestId%>"><%=dudgeLocal.getContest(contestId).getCaption()%></a>',
		tbar: mainMenuToolbar
	}, {
		region: 'west',
		id: 'west-panel', // see Ext.getCmp() below
		title: '<bean:message key="menu.navigation"/> (<a href="monitor.do?reqCode=view&contestId=<%=contestId%>"><bean:message key="menu.monitor"/></a>)',
		split: true,
		width: 200,
		minSize: 175,
		maxSize: 400,
		collapsible: true,
		margins: '0 0 0 5',
		layout: {
			type: 'accordion',
			animate: true
		},
		items: [{
				title: '<bean:message key="menu.contestProblems"/> (<a href="solutions.do?reqCode=submit&contestId=<%=contestId%>"><bean:message key="menu.submit"/></a>)',
			border: false,
			autoScroll: true,
			contentEl: 'problemsList'
		}, {
			contentEl: 'solutionRequirements',
			title: '<bean:message key="menu.solutionRequirements"/>',
			autoScroll: true,
			border: false
		}, {
			title: '<bean:message key="menu.sentSolutions"/>',
			border: false/*,
			items: sentSolutionsGrid*/
		}, {
			title: '<bean:message key="menu.misc"/>',
			border: false,
			contentEl: 'miscMenu'
		}]
	},
	{
		region: 'center',
		id: 'content-panel',
		contentEl: 'content',
		bodyStyle:'padding:5px;',
		autoScroll: true,
		tbar: new Ext.Toolbar({ height: 'auto' }),
		border: false
	}]
});

}); // Ext.OnReady()
</script>

</head>

<body>
    <!-- use class="x-hide-display" to prevent a brief flicker of the content -->
    <div id="problemsList" class="x-hide-display">

	<%
	java.util.List<dudge.db.ContestProblem> menuContestProblems = new java.util.LinkedList<dudge.db.ContestProblem>(
		(java.util.List<dudge.db.ContestProblem>) dudgeLocal.getContest(contestId).getContestProblems()
		);
	java.util.Collections.sort(menuContestProblems);
	%>

	<% for (dudge.db.ContestProblem conProb : menuContestProblems) {%>

	<%if(pcb.canViewProblem(authenticationObject.getUsername(),
		conProb.getProblem().getProblemId())) { %>
		<p><b><%=conProb.getProblemMark() %></b>. 
		<a href="problems.do?contestId=<%=contestId%>&reqCode=view&problemId=<%=Integer.toString( conProb.getProblem().getProblemId() )%>"><%=conProb.getProblem().getTitle()%></a>
	<%} else {%>
		<p><b><%=conProb.getProblemMark() %></b>.
		<i><%=conProb.getProblem().getTitle()%></i>
	<%}%>

	<%}%>
    </div>

	<div id="solutionRequirements" class="x-hide-display">
            <p> <%@include file="requirements.jspf" %></p>
	</div>

	<div id="miscMenu" class="x-hide-display">
		<p><a href="monitor.do?contestId=<%=contestId%>&reqCode=showStatus"><bean:message key="menu.status"/></a>
		<p><a href="users.do?contestId=<%=contestId%>&reqCode=list"><bean:message key="menu.users"/></a>
		<p><a href="problems.do?contestId=<%=contestId%>&reqCode=list"><bean:message key="menu.problems"/></a>
		<p><a href="languages.do?contestId=<%=contestId%>&reqCode=list"><bean:message key="menu.languages"/></a>
	</div>

	<div id="content" class="x-hide-display">
